<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smilemilk</title>
  
  <subtitle>大数据 · Python · 技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-09T08:44:08.272Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chen Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java分布式锁之redis篇</title>
    <link href="http://yoursite.com/2019/01/09/java%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://yoursite.com/2019/01/09/java分布式锁/</id>
    <published>2019-01-09T08:03:11.000Z</published>
    <updated>2019-01-09T08:44:08.272Z</updated>
    
    <content type="html"><![CDATA[<p><strong> &ensp;&ensp;&ensp;&ensp;由于在平时的工作中，线上服务器是分布式多台部署的，经常会面临解决分布式场景下数据一致性的问题，那么就要利用分布式锁来解决这些问题。所以将自己的心得体会记录下来做一个讲解和总结。希望这篇文章可以方便自己以后查阅，同时要是能帮助到刚开始接触到这方面的同学那也是很好的。 </strong></p><hr><h1 id="1、为什么要使用分布式锁"><a href="#1、为什么要使用分布式锁" class="headerlink" title="1、为什么要使用分布式锁"></a>1、为什么要使用分布式锁</h1><p>&ensp;&ensp;&ensp;&ensp;为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用Java并发处理相关的API(如ReentrantLock或Synchronized)进行互斥控制。在单机环境中，Java中提供了很多并发处理相关的API。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><h1 id="2、分布式锁应该具备那些条件"><a href="#2、分布式锁应该具备那些条件" class="headerlink" title="2、分布式锁应该具备那些条件"></a>2、分布式锁应该具备那些条件</h1><blockquote><p>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行</p></blockquote><blockquote><p>高可用的获取锁与释放锁</p></blockquote><blockquote><p>高性能的获取锁与释放锁</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；</span><br><span class="line">2、高可用的获取锁与释放锁；</span><br><span class="line">3、高性能的获取锁与释放锁；</span><br><span class="line">4、具备可重入特性；</span><br><span class="line">5、具备锁失效机制，防止死锁；</span><br><span class="line">6、具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;由于在平时的工作中，线上服务器是分布式多台部署的，经常会面临解决分布式场景下数据一致性的问题，那么就要利用分布式锁来解决这些问题。所以将自己的心得体会记录下来做一个讲解和总结。希望这篇文章可以方便自己以后查阅
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="分布式锁" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>【深度好文】simhash文本去重流程</title>
    <link href="http://yoursite.com/2019/01/06/simhash/"/>
    <id>http://yoursite.com/2019/01/06/simhash/</id>
    <published>2019-01-06T12:37:41.000Z</published>
    <updated>2019-01-09T08:06:55.184Z</updated>
    
    <content type="html"><![CDATA[<p><strong> &ensp;&ensp;&ensp;&ensp;本人目前就职于某厂新闻客户端，对于新闻客户端而言，推荐的每一刷的新闻都必须是不同的新闻，这就需要对新闻文本进行排重。传统的去重一般是对文章的url链接进行排重，但是对于抓取的网页来说，各大平台的新闻可能存在重复，对于只通过文章url进行排重是不靠谱的，为了解决这个痛点于是就提出了用simhash来解决这个难题。 </strong></p><hr><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>&ensp;&ensp;&ensp;&ensp;传统的Hash算法只负责将原始内容尽量均匀随机地映射为一个签名值，原理上仅相当于伪随机数产生算法。即便是两个原始内容只相差一个字节，所产生的签名也很可能差别很大，所以传统的Hash是无法在签名的维度上来衡量原内容的相似度。而SimHash本身属于一种<a href="https://www.cnblogs.com/maybe2030/p/4953039.html" target="_blank" rel="noopener">局部敏感hash</a>，其主要思想是降维，将高维的特征向量转化成一个f位的指纹（fingerprint），通过算出两个指纹的海明距离（hamming distince）来确定两篇文章的相似度，海明距离越小，相似度越低（根据 Detecting Near-Duplicates for Web Crawling 论文中所说），一般海明距离为3就代表两篇文章相同。<br>&ensp;&ensp;&ensp;&ensp;simhash也有其局限性，在处理小于500字的短文本时，simhash的表现并不是很好，所以在使用simhash前一定要注意这个细节。</p><h1 id="2-背景"><a href="#2-背景" class="headerlink" title="2.背景"></a>2.背景</h1><p><strong> 如何设计一个比较两篇文章相似度的算法？可能你会回答几个比较传统点的思路: </strong></p><ul><li>一种方案是先将两篇文章分别进行分词，得到一系列特征向量，然后计算特征向量之间的距离（可以计算它们之间的<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%BA%A6%E9%87%8F/1274107?fr=aladdin" target="_blank" rel="noopener">欧氏距离</a>、<a href="https://baike.baidu.com/item/%E6%B5%B7%E6%98%8E%E8%B7%9D%E7%A6%BB" target="_blank" rel="noopener">海明距离</a>或者<a href="https://baike.baidu.com/item/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6" target="_blank" rel="noopener">夹角余弦</a>等等），从而通过距离的大小来判断两篇文章的相似度。</li><li>另外一种是传统hash，我们考虑为每一个web文档通过hash的方式生成一个指纹（finger print）。</li></ul><p><strong> 下面我们来分析一下这两种方法: </strong></p><ul><li>采取第一种方法，若是只比较两篇文章的相似性还好，但如果是海量数据呢，有着数以百万甚至亿万的网页，要求你计算这些网页的相似度。你还会去计算任意两个网页之间的距离或夹角余弦么？那样做的话时间复杂度，空间复杂度可想而知。</li><li>而第二种方案中所说的传统加密方式md5，其设计的目的是为了让整个分布尽可能地均匀，但如果输入内容一旦出现哪怕轻微的变化，hash值就会发生很大的变化。</li></ul><h1 id="3-simhash与hash算法的区别"><a href="#3-simhash与hash算法的区别" class="headerlink" title="3.simhash与hash算法的区别"></a>3.simhash与hash算法的区别</h1><p>&ensp;&ensp;&ensp;&ensp;传统Hash算法只负责将原始内容尽量均匀随机地映射为一个签名值，原理上仅相当于伪随机数产生算法。传统hash算法产生的两个签名，如果不相等，除了说明原始内容不相等外，不再提供任何信息，因为即使原始内容只相差一个字节，所产生的签名也很可能差别很大，所以传统Hash是无法在签名的维度上来衡量原内容的相似度。而SimHash本身属于一种局部敏感哈希算法，它产生的hash签名在一定程度上可以表征原内容的相似度。<br>&ensp;&ensp;&ensp;&ensp;我们主要解决的是文本相似度计算，要比较的是两个文章是否相似，当然我们降维生成了hash签名也是用于这个目的。看到这里，估计大家就明白了，即使把文章中的字符串变成 01 串，我们使用的simhash算法也还是可以用于计算相似度，而传统的hash却不行。我们可以来做个测试，两个相差只有一个字符的文本串，“你妈妈喊你回家吃饭哦，回家罗回家罗” 和 “你妈妈叫你回家吃饭啦，回家罗回家罗”。</p><h1 id="4-simhash原理"><a href="#4-simhash原理" class="headerlink" title="4.simhash原理"></a>4.simhash原理</h1><blockquote><p>simhash是google用来处理海量文本去重的算法。 google出品，你懂的。 simhash最牛逼的一点就是将一个文档，最后转换成一个64位的字节，暂且称之为特征字，然后判断重复只需要判断他们的特征字的距离是不是&lt;n（根据经验这个n一般取值为3），就可以判断两个文档是否相似。</p></blockquote><p><strong> 算法过程大致如下：</strong></p><ul><li>1，对文本分词，得到N维特征向量（默认为64维）</li><li>2，为分词设置权重（tf-idf）</li><li>3，为特征向量计算哈希</li><li>4，对所有特征向量加权，累加（目前仅进行非加权累加）</li><li>5，对累加结果，大于零置一，小于零置零</li><li>6，得到文本指纹（fingerprint）</li></ul><p><strong> 具体流程实现 </strong></p><p>simhash的算法具体分为5个步骤：<strong>分词</strong>、<strong>hash</strong>、<strong>加权</strong>、<strong>合并</strong>、<strong>降维</strong>，具体过程如下：</p><ul><li><p>分词</p><ul><li>给定一段语句或者一段文本，进行分词，得到有效的特征向量，然后为每一个特征向量设置一个5个级别（1—5）权值。例如给定一段语句：“生活本没有路，走的人多了就成了路，要相信阳光总在风雨后”，分词后结果为：生活 没有 成了 相信 阳光 风雨，然后为每个特征向量赋予权值：<br>生活(5) 没有(2) 成了(1) 相信(2) 阳光(3) 风雨(2)，其中括号里的数字代表这个单词在整条语句中的重要程度，数字越大代表越重要。</li></ul></li><li><p>hash</p><ul><li>通过hash函数计算各个特征向量的hash值，hash值为二进制数01组成的n-bit签名。比如“生活”的hash值Hash(生活)为110101，“没有”的hash值Hash(没有)为“101001”。就这样，字符串就变成了一系列数字。</li></ul></li><li><p>加权</p><ul><li>在hash值的基础上，给所有特征向量进行加权，即W = Hash * weight，且遇到1则hash值和权值正相乘，遇到0则hash值和权值负相乘。例如给“生活”的hash值“110101”加权得到：W(生活) = 110101 5 = 5 5 -5 5 -5 5，给“没有”的hash值“101001”加权得到：W(没有)=101001 2 = 2 -2 2 -2 -2 2，其余特征向量类似此般操作。</li></ul></li><li><p>合并</p><ul><li>将上述各个特征向量的加权结果累加，变成只有一个序列串。拿前两个特征向量举例，例如“生活”的“5 5 -5 5 -5 5”和“没有”的“2 -2 2 -2 -2 2”进行累加，得到“5+2 5-2 -5+2 5-2 -5-2 5+2”，得到“7 3 -3 3 -7 7”。</li></ul></li><li><p>降维</p><ul><li>对于n-bit签名的累加结果，如果大于0则置1，否则置0，从而得到该语句的simhash值，最后我们便可以根据不同语句simhash的海明距离来判断它们的相似度。例如把上面计算出来的“9 -9 1 -1 1 9”降维（某位大于0记为1，小于0记为0），得到的01串为：“1 1 0 1 0 1”，从而形成它们的simhash签名。</li></ul></li></ul><p>整个过程的流程图为：</p><p><img src="/img/simhash/simhash1.jpeg" alt="simhash1"></p><h1 id="5、simhash的签名距离计算"><a href="#5、simhash的签名距离计算" class="headerlink" title="5、simhash的签名距离计算"></a>5、simhash的签名距离计算</h1><p>&ensp;&ensp;&ensp;&ensp;我们把库里的文本都转换为simhash签名，并转换为long类型存储，空间大大减少。现在我们虽然解决了空间，但是如何计算两个simhash的相似度呢？难道是比较两个simhash的01有多少个不同吗？对的，其实也就是这样，我们通过海明距离（Hamming distance）就可以计算出两个simhash到底相似不相似。两个simhash对应二进制（01串）取值不同的数量称为这两个simhash的海明距离。举例如下： 10101 和 00110 从第一位开始依次有第一位、第四、第五位不同，则海明距离为3。对于二进制字符串的a和b，海明距离为等于在a XOR b运算结果中1的个数（普遍算法）。</p><p>&ensp;&ensp;&ensp;&ensp;我们可以把 64 位的二进制simhash签名均分成4块，每块16位。根据鸽巢原理（也称抽屉原理），如果两个签名的海明距离在 3 以内，它们必有一块完全相同。如下图所示：<br><img src="/img/simhash/simhash2.jpeg" alt="simhash2"></p><h1 id="6、simhash的存储和查找"><a href="#6、simhash的存储和查找" class="headerlink" title="6、simhash的存储和查找"></a>6、simhash的存储和查找</h1><ol><li>我们需要将64位simhash均分为4份，然后每份作为key存储到redis</li><li>采用精确匹配的方式查找前16位</li><li>找到则拿出来计算与被比较的simahsh距离，小于3则判断为相似（当然具体问题具体分析，这个值可以调整）</li><li>如果样本库中存有2^34（差不多10亿）的哈希指纹，则每个table返回2^(34-16)=262144个候选结果，大大减少了海明距离的计算成本 </li></ol><p><img src="/img/simhash/simhash3.jpeg" alt="simhash3"></p><h1 id="7、聊聊Jaccard相似度与汉明距离"><a href="#7、聊聊Jaccard相似度与汉明距离" class="headerlink" title="7、聊聊Jaccard相似度与汉明距离"></a>7、聊聊Jaccard相似度与汉明距离</h1><h2 id="7-1-Jaccard相似度"><a href="#7-1-Jaccard相似度" class="headerlink" title="7.1 Jaccard相似度"></a>7.1 Jaccard相似度</h2><p>&ensp;&ensp;&ensp;&ensp; Jaccard 系数，又叫Jaccard相似性系数，用来比较样本集中的相似性和分散性的一个概率。<br>公式：</p><p><img src="/img/simhash/jaccard.png" alt="jaccard"></p><p>给定两个集合A,B jaccard 系数定义为A与B交集的大小与并集大小的比值，jaccard值越大说明相似度越高</p><h2 id="7-2-汉明距离"><a href="#7-2-汉明距离" class="headerlink" title="7.2 汉明距离"></a>7.2 汉明距离</h2><p>&ensp;&ensp;&ensp;&ensp;在信息理论中，Hamming Distance 表示两个等长字符串在对应位置上不同字符的数目，我们以d(x, y)表示字符串x和y之间的汉明距离。从另外一个方面看，汉明距离度量了通过替换字符的方式将字符串x变成y所需要的最小的替换次数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">举例说明以下字符串间的汉明距离为：</span><br><span class="line">&quot;karolin&quot; and &quot;kathrin&quot; is 3.</span><br><span class="line">&quot;karolin&quot; and &quot;kerstin&quot; is 3.</span><br><span class="line">1011101 and 1001001 is 2.</span><br><span class="line">2173896 and 2233796 is 3.</span><br></pre></td></tr></table></figure><h1 id="8、【实战】新闻文本去重服务详细流程"><a href="#8、【实战】新闻文本去重服务详细流程" class="headerlink" title="8、【实战】新闻文本去重服务详细流程"></a>8、【实战】新闻文本去重服务详细流程</h1><p>&ensp;&ensp;&ensp;&ensp;上面陆陆续续讲了这么多理论知识想必大家也是一头雾水，接下来我们通过实战来讲述整体流程。</p><p><img src="/img/simhash/pic1.gif" alt="pic1"></p><p>&ensp;&ensp;&ensp;&ensp;本文将文本排重做成了一个接口，首先给去重接口传一些必要的参数，针对新闻文本为例（url:链接 title:文本标题 content:内容）。依次是进行url排重、title排重、content排重，<br>如果三种都没有找到，则建立url、title、content索引存储到redis。具体流程图如下：</p><p><img src="/img/simhash/SIMHASH.png" alt="simhash4"></p><h2 id="8-1、URL排重"><a href="#8-1、URL排重" class="headerlink" title="8.1、URL排重"></a>8.1、URL排重</h2><ol><li><p>建立URL索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key: url_index_name+&quot;_&quot;+urlMD5。url_index_name为索引名字，urlMD5表示url的MD5值</span><br><span class="line">value: docId+&quot;\t&quot;+url+&quot;\t&quot;+storageTime。  docId为新闻的事件id，url表示新闻链接，storageTime表示存入redis的时间戳</span><br></pre></td></tr></table></figure></li><li><p>根据urlMD5从redis查找数据，找到则排重成功返回docId，没有找到则排重失败。</p></li></ol><h2 id="8-2、Title排重"><a href="#8-2、Title排重" class="headerlink" title="8.2、Title排重"></a>8.2、Title排重</h2><ol><li><p>建立Title索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key: title_index_name+&quot;_&quot;+titleMD5。title_index_name为索引名字，titleMD5表示title的MD5值</span><br><span class="line">value: docId+&quot;\t&quot;+title+&quot;\t&quot;+url+&quot;\t&quot;+storageTime。  docId为新闻的事件id，title为新闻标题，url表示新闻链接，storageTime表示存入redis的时间戳</span><br></pre></td></tr></table></figure></li><li><p>根据titleMD5从redis查找数据，找到则排重成功返回docId，没有找到则排重失败。</p></li></ol><h2 id="8-3、Content排重"><a href="#8-3、Content排重" class="headerlink" title="8.3、Content排重"></a>8.3、Content排重</h2><ol><li><p>建立Content索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先将64位simhash值均分为4份：</span><br><span class="line">simHashFragment1、simHashFragment2、simHashFragment3、simHashFragment4</span><br><span class="line">key: content_index_name+&quot;_&quot;+simHashFragment。content_index_name为索引名字，simHashFragment表示其中一段simhash值（16位）</span><br><span class="line">value: docId+&quot;\t&quot;+title+&quot;\t&quot;+simhash+&quot;\t&quot;+url+&quot;\t&quot;+storageTime。  docId为新闻的事件id，title为新闻标题，url表示新闻链接，storageTime表示存入redis的时间戳</span><br></pre></td></tr></table></figure></li><li><p>然后将这4份索引存储到redis(LIST)</p></li><li>根据simHashFragment索引从redis里面查找（4份simhash索引都得一起召回）</li><li>将召回的值依次与带排重的文本比对<ul><li>hanmingDistance&lt;=H 并且 jarccardSimilary&gt;=J 召回(一般设置H=10,J=0.7 具体情况具体分析)  注：三天内新闻做法</li><li>hanmingDistance&lt;=3 并且 jarccardSimilary&gt;=0.7  注：三天外新闻做法</li></ul></li><li>将召回的新闻做rank（这里不细讲，方法很多），TOP1作为排重的新闻</li></ol><h1 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h1><p>&ensp;&ensp;&ensp;&ensp;现如今是一个信息过载的时代，高效的从海量文本里面快速找到相似的文本是一个需要解决的一个痛点，simhash的存在就很好的解决了这个问题。</p><p>&ensp;&ensp;&ensp;&ensp;由于simhash是局部敏感的hash，其可能不适合做这种短标题的重复度判断，会存在一定的误差，文本越长判断的准确率越高。</p><hr><p>好记性不如烂笔头，记录点滴！</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;本人目前就职于某厂新闻客户端，对于新闻客户端而言，推荐的每一刷的新闻都必须是不同的新闻，这就需要对新闻文本进行排重。传统的去重一般是对文章的url链接进行排重，但是对于抓取的网页来说，各大平台的新闻可能存在重
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="文本去重" scheme="http://yoursite.com/tags/%E6%96%87%E6%9C%AC%E5%8E%BB%E9%87%8D/"/>
    
      <category term="simhash" scheme="http://yoursite.com/tags/simhash/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://yoursite.com/2019/01/05/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/05/markdown基本语法/</id>
    <published>2019-01-05T13:31:07.000Z</published>
    <updated>2019-01-08T10:05:38.100Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp; markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><ul><li>优点<ul><li>因为是纯文本，所以只要支持markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。</li><li>操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而markdown只需要在标题内容前加#即可</li></ul></li><li>缺点<ul><li>需要记一些语法（当然，是很简单。五分钟学会）。</li><li>有些平台不支持markdown编辑模式。</li></ul></li></ul><hr><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>&ensp;&ensp;&ensp;&ensp; 在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><hr><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul><li>加粗</li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li>斜体</li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li>斜体加粗</li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li>删除线</li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><hr><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><hr><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure></p><hr><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[搜狐](http://www.souhu.com)</span><br><span class="line">[百度](http://www.baidu.com)</span><br></pre></td></tr></table></figure></p><hr><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>语法：<br>无序列表用 - + * 任何一种都可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>语法：<br>数字加点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure></p><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>上一级和下一级之间敲三个空格即可</p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容</p><ol><li>二级有序列表内容</li></ol></li></ul><ol><li><p>一级有序列表内容</p><ul><li>二级无序列表内容</li></ul></li><li><p>一级有序列表内容</p><ol><li>二级有序列表内容</li></ol></li></ol><hr><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 水果 | 价格 | 数量 | </span><br><span class="line">| -------- | -----: | :----: | </span><br><span class="line">| 香蕉 | $1 | 5 | </span><br><span class="line">| 苹果 | $1 | 6 | </span><br><span class="line">| 草莓 | $1 | 7 |</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>水果</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>香蕉</td><td style="text-align:right">$1</td><td style="text-align:center">5</td></tr><tr><td>苹果</td><td style="text-align:right">$1</td><td style="text-align:center">6</td></tr><tr><td>草莓</td><td style="text-align:right">$1</td><td style="text-align:center">7</td></tr></tbody></table><hr><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure></p><p>python 代码块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = range(<span class="number">2000</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">   <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">continue</span></span><br><span class="line">   print(i + <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>java 代码块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> URLInfo <span class="title">extractURLHost</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">URLInfo urlInfo = <span class="keyword">new</span> URLInfo();</span><br><span class="line">String host = HostDomainExtractKit.extractURLHost(url);</span><br><span class="line">String domain = HostDomainExtractKit.getTopLevelDomain(url);</span><br><span class="line">urlInfo.setHost(host);</span><br><span class="line">urlInfo.setDomain(domain);</span><br><span class="line"><span class="keyword">return</span> urlInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><p>一般写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;End</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></p><p><img src="/img/流程图.png" alt="流程图"></p><p><strong><em>注：MarkDown没 有统一标准，不同网站实现的方式不同，目前github上写markdown，并没有实现流程图的语法。</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp; markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;ul&gt;
&lt;li&gt;因为是纯文本，所以只要支持markdown的地方都能获得一样的编辑效果，可
      
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下安装PyV8</title>
    <link href="http://yoursite.com/2019/01/03/pyv8/"/>
    <id>http://yoursite.com/2019/01/03/pyv8/</id>
    <published>2019-01-03T15:42:15.000Z</published>
    <updated>2019-01-08T10:05:38.093Z</updated>
    
    <content type="html"><![CDATA[<p>这几天需要使用PyV8来进行python与javascript的交互，在ubuntu上面安装遇到了不少的坑，折腾几小时终于找到方法。</p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install scons</span><br><span class="line">$ sudo apt-get install libboost-dev libboost-thread-dev</span><br><span class="line">$ sudo apt-get install libboost-system-dev libboost-python-dev</span><br></pre></td></tr></table></figure><h1 id="安装Pyv8"><a href="#安装Pyv8" class="headerlink" title="安装Pyv8"></a>安装Pyv8</h1><p>&ensp;&ensp;&ensp;&ensp;下载二进制文件<a href="https://github.com/emmetio/pyv8-binaries" target="_blank" rel="noopener">github</a>找到适合你机器的版本下载。解压出来应该有两个文件：<em>PyV8.py</em> ,<em> _PyV8.so</em>,然后把这两个文件拷贝到你的python第三方包的目录里面就好，比如我的是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> pyv8</span><br><span class="line">$ sudo cp * /usr/lib/python2.7/dist-packages/</span><br></pre></td></tr></table></figure></p><p>&ensp;&ensp;&ensp;然后进入到python环境测试如下代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import PyV8</span><br><span class="line">ctxt = PyV8.JSContext()</span><br><span class="line">ctxt.enter()</span><br><span class="line">func = ctxt.eval(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">(function()&#123;</span></span><br><span class="line"><span class="string">    function hello()&#123;</span></span><br><span class="line"><span class="string">        return "</span>Hello world.<span class="string">";</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return hello();</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span>)</span><br><span class="line"><span class="built_in">print</span> func()</span><br></pre></td></tr></table></figure></p><p>执行输出Hello World说明安装成功了，就可以模拟JS代码了。</p><hr><p>好记性不如烂笔头，记录点滴！</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天需要使用PyV8来进行python与javascript的交互，在ubuntu上面安装遇到了不少的坑，折腾几小时终于找到方法。&lt;/p&gt;
&lt;h1 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="pyv8" scheme="http://yoursite.com/tags/pyv8/"/>
    
  </entry>
  
  <entry>
    <title>hexo一个错误解</title>
    <link href="http://yoursite.com/2019/01/02/error/"/>
    <id>http://yoursite.com/2019/01/02/error/</id>
    <published>2019-01-02T15:42:15.000Z</published>
    <updated>2019-01-08T10:05:38.107Z</updated>
    
    <content type="html"><![CDATA[<p>今天进入到博客目录，发现hexo命令行用不了了，报如下错误：</p><blockquote><p>ERROR Local hexo not found in ~/Downloads/hexo/blog</p></blockquote><blockquote><p>ERROR Try running: ‘npm install hexo –save’</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><blockquote><p>rm -rf node_modules</p></blockquote><blockquote><p>npm install</p></blockquote><p>ok,至此hexo命令已经可以运行，问题解决！</p><hr><p><strong>好记性不如烂笔头，记录点滴！</strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天进入到博客目录，发现hexo命令行用不了了，报如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ERROR Local hexo not found in ~/Downloads/hexo/blog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="常见错误解决" scheme="http://yoursite.com/categories/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>smilemilk的第一次博客之旅</title>
    <link href="http://yoursite.com/2019/01/01/hello-world/"/>
    <id>http://yoursite.com/2019/01/01/hello-world/</id>
    <published>2019-01-01T01:42:15.000Z</published>
    <updated>2019-01-09T08:10:39.767Z</updated>
    
    <content type="html"><![CDATA[<p>在这里我将会和大家在接下来的日子里面一起分享自己的<strong>爬虫</strong>+<strong>搜索</strong>+<strong>大数据</strong>方面的工程经验，</p><p>&ensp;&ensp;&ensp;&ensp;本来2018年就想写点自己的东西一直拖到2019年（🤦捂脸。。。♀)，主要是因为2018年整个在忙实习还有硕士毕业的各种事情。转眼就到 2019 年了，其实我没有写总结的习惯，现在到头来还是蛮后悔的，说实话总结其实还是蛮有必要的，现在就趁着这个时间来立一下 2019 的 Flag，再等到 2020 年翻出来打脸吧，哈哈😄。</p><p><img src="/img/simhash/pic1.gif" alt="pic1"></p><p><strong>好记性不如烂笔头，接下来我的博客将会陆续更新，博客还在施工中，敬请期待！！</strong>        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这里我将会和大家在接下来的日子里面一起分享自己的&lt;strong&gt;爬虫&lt;/strong&gt;+&lt;strong&gt;搜索&lt;/strong&gt;+&lt;strong&gt;大数据&lt;/strong&gt;方面的工程经验，&lt;/p&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;本来2018年就想写点自
      
    
    </summary>
    
      <category term="about me" scheme="http://yoursite.com/categories/about-me/"/>
    
    
  </entry>
  
</feed>
